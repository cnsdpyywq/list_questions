问题：已知单向链表的节点struct node *p，在不知道头节点的情况下，如何从链表中删除p？

解答：[prev] -> [p] -> [p->next] ，通常删除p的做法是 prev->next = p->next; free(p); 现在的情况是 [p] -> [p->next]，不知道节点[prev]，怎么办？我琢磨了很久才想通，真正的需求是，要删除p，而不是p指向的内存，*p = *p->next; free(p->next); （当然这要求struct node是可复制的，这个要求很容易满足）用p->next的内容（内存）覆盖p的内容（内存）不就达到目的的了吗？我被惯性思维束缚了。

实例代码29-30行，在仅知道节点n2的情况下，就把它从链表中删除了。

  1 #include <stdlib.h>
  2 #include <stdio.h>
  3
  4 struct node {
  5     int value;
  6     struct node *next;
  7 };
  8
  9 int main()
 10 {  
 11     struct node *n1 = malloc(sizeof(struct node));
 12     n1->value = 1;
 13     n1->next = 0;
 14     struct node *n2 = malloc(sizeof(struct node));
 15     n2->value = 2;
 16     n2->next = n1;
 17     struct node *n3 = malloc(sizeof(struct node));
 18     n3->value = 3;
 19     n3->next = n2;
 20    
 21     struct node *p = n3;
 22     while (p) {
 23         printf("%d\t", p->value);
 24         p = p->next;
 25     }  
 26     printf("\n");
 27    
 28     // now we delete n2, we only used node n2
 29     *n2 = *n2->next;
 30     free(n2->next);
 31    
 32     p = n3;
 33     while (p) {
 34         printf("%d\t", p->value);
 35         p = p->next;
 36     }  
 37     free(n3);
 38     free(n2);
 39    
 40     return 0;
 41 }  

输出：

3       2       1
3       1

我的失误之处有二，一是习惯性思维，而是受惯性影响，没有搞清楚真正的问题所在。
